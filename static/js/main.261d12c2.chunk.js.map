{"version":3,"sources":["img/eftlogo.png","components/Calculator/Calculator.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","React","useState","active","setActive","turnRate","setTurnRate","userSensitivity","setUserSensitivity","adjustedSensitivity","setAdjustedSensitivity","className","src","EftLogo","alt","htmlFor","type","name","id","onInput","e","target","value","onClick","preventDefault","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,qC,wLCI9BC,EAAa,WAAO,IAAD,EACHC,IAAMC,UAAS,GADZ,mBACxBC,EADwB,KAChBC,EADgB,OAECH,IAAMC,WAFP,mBAExBG,EAFwB,KAEdC,EAFc,OAGeL,IAAMC,WAHrB,mBAGxBK,EAHwB,KAGPC,EAHO,OAIuBP,IAAMC,WAJ7B,mBAIxBO,EAJwB,KAIHC,EAJG,KAa/B,OACC,yBAAKC,UAAU,cACd,yBAAKC,IAAKC,IAASC,IAAI,uBACvB,sDACA,8BACC,2BAAOC,QAAQ,qBAAf,2BAGA,2BACCC,KAAK,OACLC,KAAK,oBACLC,GAAG,oBACHC,QAAS,SAAAC,GAAC,OAAId,EAAYc,EAAEC,OAAOC,UAEpC,2BAAOP,QAAQ,mBAAf,oBACA,2BACCC,KAAK,OACLC,KAAK,kBACLC,GAAG,kBACHC,QAAS,SAAAC,GAAC,OAAIZ,EAAmBY,EAAEC,OAAOC,UAE3C,4BAAQC,QA5BoB,SAAAH,GAC9BA,EAAEI,iBAEFd,EAAwBH,GADL,IAAMF,GAC+B,KACxDD,GAAU,KAwBR,cAGAD,EACA,yBAAKQ,UAAU,UACbF,EACA,oDACuB,IACrBA,EAAoBgB,QAAQ,IAG9B,oDAED,4BAAQT,KAAK,QAAQO,QAAS,kBAAMnB,GAAU,KAA9C,UAIE,OChDQsB,MAJf,WACC,OAAO,kBAAC,EAAD,OCQYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.261d12c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eftlogo.c2bed103.png\";","import React from 'react'\r\nimport './Calculator.styles.css'\r\nimport EftLogo from '../../img/eftlogo.png'\r\n\r\nexport const Calculator = () => {\r\n\tconst [active, setActive] = React.useState(false)\r\n\tconst [turnRate, setTurnRate] = React.useState()\r\n\tconst [userSensitivity, setUserSensitivity] = React.useState()\r\n\tconst [adjustedSensitivity, setAdjustedSensitivity] = React.useState()\r\n\r\n\tconst sensitivityCalculation = e => {\r\n\t\te.preventDefault()\r\n\t\tconst multiplier = 100 - turnRate\r\n\t\tsetAdjustedSensitivity((userSensitivity / multiplier) * 100)\r\n\t\tsetActive(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Calculator'>\r\n\t\t\t<img src={EftLogo} alt='Escape From Tarkov' />\r\n\t\t\t<h2>Sensitivity Calculator</h2>\r\n\t\t\t<form>\r\n\t\t\t\t<label htmlFor='turnRateReduction'>\r\n\t\t\t\t\tTurn Rate Reduction (%)\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='turnRateReduction'\r\n\t\t\t\t\tid='turnRateReduction'\r\n\t\t\t\t\tonInput={e => setTurnRate(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor='userSensitivity'>Your sensitivity</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='userSensitivity'\r\n\t\t\t\t\tid='userSensitivity'\r\n\t\t\t\t\tonInput={e => setUserSensitivity(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={sensitivityCalculation}>Calculate</button>\r\n\t\t\t</form>\r\n\r\n\t\t\t{active ? (\r\n\t\t\t\t<div className='active'>\r\n\t\t\t\t\t{adjustedSensitivity ? (\r\n\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\tAdjusted sensitivity:{' '}\r\n\t\t\t\t\t\t\t{adjustedSensitivity.toFixed(2)}\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<h3>You missed something</h3>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button type='reset' onClick={() => setActive(false)}>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t) : null}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\nimport { Calculator } from './components/Calculator/Calculator.component'\n\nfunction App() {\n\treturn <Calculator />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}